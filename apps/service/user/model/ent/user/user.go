// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNickName holds the string denoting the nickname field in the database.
	FieldNickName = "nick_name"
	// FieldRealName holds the string denoting the realname field in the database.
	FieldRealName = "real_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldTel holds the string denoting the tel field in the database.
	FieldTel = "tel"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldLastLoginTime holds the string denoting the lastlogintime field in the database.
	FieldLastLoginTime = "last_login_time"
	// FieldLastIPAddr holds the string denoting the lastipaddr field in the database.
	FieldLastIPAddr = "last_ip_addr"
	// FieldCreateTime holds the string denoting the createtime field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the updatetime field in the database.
	FieldUpdateTime = "update_time"
	// FieldIsDeleted holds the string denoting the isdeleted field in the database.
	FieldIsDeleted = "is_deleted"
	// Table holds the table name of the user in the database.
	Table = "users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldNickName,
	FieldRealName,
	FieldEmail,
	FieldTel,
	FieldPassword,
	FieldLastLoginTime,
	FieldLastIPAddr,
	FieldCreateTime,
	FieldUpdateTime,
	FieldIsDeleted,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLastLoginTime holds the default value on creation for the "lastLoginTime" field.
	DefaultLastLoginTime int64
	// DefaultLastIPAddr holds the default value on creation for the "lastIPAddr" field.
	DefaultLastIPAddr string
	// DefaultIsDeleted holds the default value on creation for the "isDeleted" field.
	DefaultIsDeleted int64
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNickName orders the results by the nickName field.
func ByNickName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNickName, opts...).ToFunc()
}

// ByRealName orders the results by the realName field.
func ByRealName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRealName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByTel orders the results by the tel field.
func ByTel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTel, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByLastLoginTime orders the results by the lastLoginTime field.
func ByLastLoginTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLoginTime, opts...).ToFunc()
}

// ByLastIPAddr orders the results by the lastIPAddr field.
func ByLastIPAddr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastIPAddr, opts...).ToFunc()
}

// ByCreateTime orders the results by the createTime field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the updateTime field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByIsDeleted orders the results by the isDeleted field.
func ByIsDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDeleted, opts...).ToFunc()
}
