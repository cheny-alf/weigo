// Code generated by ent, DO NOT EDIT.

package user

import (
	"wego/apps/service/user/model/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// NickName applies equality check predicate on the "nickName" field. It's identical to NickNameEQ.
func NickName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNickName, v))
}

// RealName applies equality check predicate on the "realName" field. It's identical to RealNameEQ.
func RealName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRealName, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// Tel applies equality check predicate on the "tel" field. It's identical to TelEQ.
func Tel(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTel, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// LastLoginTime applies equality check predicate on the "lastLoginTime" field. It's identical to LastLoginTimeEQ.
func LastLoginTime(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginTime, v))
}

// LastIPAddr applies equality check predicate on the "lastIPAddr" field. It's identical to LastIPAddrEQ.
func LastIPAddr(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastIPAddr, v))
}

// CreateTime applies equality check predicate on the "createTime" field. It's identical to CreateTimeEQ.
func CreateTime(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "updateTime" field. It's identical to UpdateTimeEQ.
func UpdateTime(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateTime, v))
}

// IsDeleted applies equality check predicate on the "isDeleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsDeleted, v))
}

// NickNameEQ applies the EQ predicate on the "nickName" field.
func NickNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNickName, v))
}

// NickNameNEQ applies the NEQ predicate on the "nickName" field.
func NickNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNickName, v))
}

// NickNameIn applies the In predicate on the "nickName" field.
func NickNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNickName, vs...))
}

// NickNameNotIn applies the NotIn predicate on the "nickName" field.
func NickNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNickName, vs...))
}

// NickNameGT applies the GT predicate on the "nickName" field.
func NickNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNickName, v))
}

// NickNameGTE applies the GTE predicate on the "nickName" field.
func NickNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNickName, v))
}

// NickNameLT applies the LT predicate on the "nickName" field.
func NickNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNickName, v))
}

// NickNameLTE applies the LTE predicate on the "nickName" field.
func NickNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNickName, v))
}

// NickNameContains applies the Contains predicate on the "nickName" field.
func NickNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNickName, v))
}

// NickNameHasPrefix applies the HasPrefix predicate on the "nickName" field.
func NickNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNickName, v))
}

// NickNameHasSuffix applies the HasSuffix predicate on the "nickName" field.
func NickNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNickName, v))
}

// NickNameEqualFold applies the EqualFold predicate on the "nickName" field.
func NickNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNickName, v))
}

// NickNameContainsFold applies the ContainsFold predicate on the "nickName" field.
func NickNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNickName, v))
}

// RealNameEQ applies the EQ predicate on the "realName" field.
func RealNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRealName, v))
}

// RealNameNEQ applies the NEQ predicate on the "realName" field.
func RealNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRealName, v))
}

// RealNameIn applies the In predicate on the "realName" field.
func RealNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldRealName, vs...))
}

// RealNameNotIn applies the NotIn predicate on the "realName" field.
func RealNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRealName, vs...))
}

// RealNameGT applies the GT predicate on the "realName" field.
func RealNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldRealName, v))
}

// RealNameGTE applies the GTE predicate on the "realName" field.
func RealNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldRealName, v))
}

// RealNameLT applies the LT predicate on the "realName" field.
func RealNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldRealName, v))
}

// RealNameLTE applies the LTE predicate on the "realName" field.
func RealNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldRealName, v))
}

// RealNameContains applies the Contains predicate on the "realName" field.
func RealNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldRealName, v))
}

// RealNameHasPrefix applies the HasPrefix predicate on the "realName" field.
func RealNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldRealName, v))
}

// RealNameHasSuffix applies the HasSuffix predicate on the "realName" field.
func RealNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldRealName, v))
}

// RealNameEqualFold applies the EqualFold predicate on the "realName" field.
func RealNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldRealName, v))
}

// RealNameContainsFold applies the ContainsFold predicate on the "realName" field.
func RealNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldRealName, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// TelEQ applies the EQ predicate on the "tel" field.
func TelEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTel, v))
}

// TelNEQ applies the NEQ predicate on the "tel" field.
func TelNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTel, v))
}

// TelIn applies the In predicate on the "tel" field.
func TelIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldTel, vs...))
}

// TelNotIn applies the NotIn predicate on the "tel" field.
func TelNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTel, vs...))
}

// TelGT applies the GT predicate on the "tel" field.
func TelGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldTel, v))
}

// TelGTE applies the GTE predicate on the "tel" field.
func TelGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTel, v))
}

// TelLT applies the LT predicate on the "tel" field.
func TelLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldTel, v))
}

// TelLTE applies the LTE predicate on the "tel" field.
func TelLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTel, v))
}

// TelContains applies the Contains predicate on the "tel" field.
func TelContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldTel, v))
}

// TelHasPrefix applies the HasPrefix predicate on the "tel" field.
func TelHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldTel, v))
}

// TelHasSuffix applies the HasSuffix predicate on the "tel" field.
func TelHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldTel, v))
}

// TelEqualFold applies the EqualFold predicate on the "tel" field.
func TelEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldTel, v))
}

// TelContainsFold applies the ContainsFold predicate on the "tel" field.
func TelContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldTel, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword, v))
}

// LastLoginTimeEQ applies the EQ predicate on the "lastLoginTime" field.
func LastLoginTimeEQ(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginTime, v))
}

// LastLoginTimeNEQ applies the NEQ predicate on the "lastLoginTime" field.
func LastLoginTimeNEQ(v int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastLoginTime, v))
}

// LastLoginTimeIn applies the In predicate on the "lastLoginTime" field.
func LastLoginTimeIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastLoginTime, vs...))
}

// LastLoginTimeNotIn applies the NotIn predicate on the "lastLoginTime" field.
func LastLoginTimeNotIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastLoginTime, vs...))
}

// LastLoginTimeGT applies the GT predicate on the "lastLoginTime" field.
func LastLoginTimeGT(v int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastLoginTime, v))
}

// LastLoginTimeGTE applies the GTE predicate on the "lastLoginTime" field.
func LastLoginTimeGTE(v int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastLoginTime, v))
}

// LastLoginTimeLT applies the LT predicate on the "lastLoginTime" field.
func LastLoginTimeLT(v int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastLoginTime, v))
}

// LastLoginTimeLTE applies the LTE predicate on the "lastLoginTime" field.
func LastLoginTimeLTE(v int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastLoginTime, v))
}

// LastIPAddrEQ applies the EQ predicate on the "lastIPAddr" field.
func LastIPAddrEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastIPAddr, v))
}

// LastIPAddrNEQ applies the NEQ predicate on the "lastIPAddr" field.
func LastIPAddrNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastIPAddr, v))
}

// LastIPAddrIn applies the In predicate on the "lastIPAddr" field.
func LastIPAddrIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastIPAddr, vs...))
}

// LastIPAddrNotIn applies the NotIn predicate on the "lastIPAddr" field.
func LastIPAddrNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastIPAddr, vs...))
}

// LastIPAddrGT applies the GT predicate on the "lastIPAddr" field.
func LastIPAddrGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastIPAddr, v))
}

// LastIPAddrGTE applies the GTE predicate on the "lastIPAddr" field.
func LastIPAddrGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastIPAddr, v))
}

// LastIPAddrLT applies the LT predicate on the "lastIPAddr" field.
func LastIPAddrLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastIPAddr, v))
}

// LastIPAddrLTE applies the LTE predicate on the "lastIPAddr" field.
func LastIPAddrLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastIPAddr, v))
}

// LastIPAddrContains applies the Contains predicate on the "lastIPAddr" field.
func LastIPAddrContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLastIPAddr, v))
}

// LastIPAddrHasPrefix applies the HasPrefix predicate on the "lastIPAddr" field.
func LastIPAddrHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLastIPAddr, v))
}

// LastIPAddrHasSuffix applies the HasSuffix predicate on the "lastIPAddr" field.
func LastIPAddrHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLastIPAddr, v))
}

// LastIPAddrEqualFold applies the EqualFold predicate on the "lastIPAddr" field.
func LastIPAddrEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLastIPAddr, v))
}

// LastIPAddrContainsFold applies the ContainsFold predicate on the "lastIPAddr" field.
func LastIPAddrContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLastIPAddr, v))
}

// CreateTimeEQ applies the EQ predicate on the "createTime" field.
func CreateTimeEQ(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "createTime" field.
func CreateTimeNEQ(v int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "createTime" field.
func CreateTimeIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "createTime" field.
func CreateTimeNotIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "createTime" field.
func CreateTimeGT(v int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "createTime" field.
func CreateTimeGTE(v int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "createTime" field.
func CreateTimeLT(v int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "createTime" field.
func CreateTimeLTE(v int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "updateTime" field.
func UpdateTimeEQ(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "updateTime" field.
func UpdateTimeNEQ(v int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "updateTime" field.
func UpdateTimeIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "updateTime" field.
func UpdateTimeNotIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "updateTime" field.
func UpdateTimeGT(v int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "updateTime" field.
func UpdateTimeGTE(v int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "updateTime" field.
func UpdateTimeLT(v int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "updateTime" field.
func UpdateTimeLTE(v int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdateTime, v))
}

// IsDeletedEQ applies the EQ predicate on the "isDeleted" field.
func IsDeletedEQ(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsDeleted, v))
}

// IsDeletedNEQ applies the NEQ predicate on the "isDeleted" field.
func IsDeletedNEQ(v int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsDeleted, v))
}

// IsDeletedIn applies the In predicate on the "isDeleted" field.
func IsDeletedIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldIsDeleted, vs...))
}

// IsDeletedNotIn applies the NotIn predicate on the "isDeleted" field.
func IsDeletedNotIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldIsDeleted, vs...))
}

// IsDeletedGT applies the GT predicate on the "isDeleted" field.
func IsDeletedGT(v int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldIsDeleted, v))
}

// IsDeletedGTE applies the GTE predicate on the "isDeleted" field.
func IsDeletedGTE(v int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldIsDeleted, v))
}

// IsDeletedLT applies the LT predicate on the "isDeleted" field.
func IsDeletedLT(v int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldIsDeleted, v))
}

// IsDeletedLTE applies the LTE predicate on the "isDeleted" field.
func IsDeletedLTE(v int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldIsDeleted, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
