// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"wego/apps/service/user/model/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNickName sets the "nickName" field.
func (uc *UserCreate) SetNickName(s string) *UserCreate {
	uc.mutation.SetNickName(s)
	return uc
}

// SetRealName sets the "realName" field.
func (uc *UserCreate) SetRealName(s string) *UserCreate {
	uc.mutation.SetRealName(s)
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetTel sets the "tel" field.
func (uc *UserCreate) SetTel(s string) *UserCreate {
	uc.mutation.SetTel(s)
	return uc
}

// SetPassword sets the "password" field.
func (uc *UserCreate) SetPassword(s string) *UserCreate {
	uc.mutation.SetPassword(s)
	return uc
}

// SetLastLoginTime sets the "lastLoginTime" field.
func (uc *UserCreate) SetLastLoginTime(i int64) *UserCreate {
	uc.mutation.SetLastLoginTime(i)
	return uc
}

// SetNillableLastLoginTime sets the "lastLoginTime" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastLoginTime(i *int64) *UserCreate {
	if i != nil {
		uc.SetLastLoginTime(*i)
	}
	return uc
}

// SetLastIPAddr sets the "lastIPAddr" field.
func (uc *UserCreate) SetLastIPAddr(s string) *UserCreate {
	uc.mutation.SetLastIPAddr(s)
	return uc
}

// SetNillableLastIPAddr sets the "lastIPAddr" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastIPAddr(s *string) *UserCreate {
	if s != nil {
		uc.SetLastIPAddr(*s)
	}
	return uc
}

// SetCreateTime sets the "createTime" field.
func (uc *UserCreate) SetCreateTime(i int64) *UserCreate {
	uc.mutation.SetCreateTime(i)
	return uc
}

// SetUpdateTime sets the "updateTime" field.
func (uc *UserCreate) SetUpdateTime(i int64) *UserCreate {
	uc.mutation.SetUpdateTime(i)
	return uc
}

// SetIsDeleted sets the "isDeleted" field.
func (uc *UserCreate) SetIsDeleted(i int64) *UserCreate {
	uc.mutation.SetIsDeleted(i)
	return uc
}

// SetNillableIsDeleted sets the "isDeleted" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsDeleted(i *int64) *UserCreate {
	if i != nil {
		uc.SetIsDeleted(*i)
	}
	return uc
}

// AddFollowerIDs adds the "followers" edge to the User entity by IDs.
func (uc *UserCreate) AddFollowerIDs(ids ...int) *UserCreate {
	uc.mutation.AddFollowerIDs(ids...)
	return uc
}

// AddFollowers adds the "followers" edges to the User entity.
func (uc *UserCreate) AddFollowers(u ...*User) *UserCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddFollowerIDs(ids...)
}

// AddFollowingIDs adds the "following" edge to the User entity by IDs.
func (uc *UserCreate) AddFollowingIDs(ids ...int) *UserCreate {
	uc.mutation.AddFollowingIDs(ids...)
	return uc
}

// AddFollowing adds the "following" edges to the User entity.
func (uc *UserCreate) AddFollowing(u ...*User) *UserCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddFollowingIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.LastLoginTime(); !ok {
		v := user.DefaultLastLoginTime
		uc.mutation.SetLastLoginTime(v)
	}
	if _, ok := uc.mutation.LastIPAddr(); !ok {
		v := user.DefaultLastIPAddr
		uc.mutation.SetLastIPAddr(v)
	}
	if _, ok := uc.mutation.IsDeleted(); !ok {
		v := user.DefaultIsDeleted
		uc.mutation.SetIsDeleted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.NickName(); !ok {
		return &ValidationError{Name: "nickName", err: errors.New(`ent: missing required field "User.nickName"`)}
	}
	if _, ok := uc.mutation.RealName(); !ok {
		return &ValidationError{Name: "realName", err: errors.New(`ent: missing required field "User.realName"`)}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if _, ok := uc.mutation.Tel(); !ok {
		return &ValidationError{Name: "tel", err: errors.New(`ent: missing required field "User.tel"`)}
	}
	if _, ok := uc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "User.password"`)}
	}
	if _, ok := uc.mutation.LastLoginTime(); !ok {
		return &ValidationError{Name: "lastLoginTime", err: errors.New(`ent: missing required field "User.lastLoginTime"`)}
	}
	if _, ok := uc.mutation.LastIPAddr(); !ok {
		return &ValidationError{Name: "lastIPAddr", err: errors.New(`ent: missing required field "User.lastIPAddr"`)}
	}
	if _, ok := uc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "createTime", err: errors.New(`ent: missing required field "User.createTime"`)}
	}
	if _, ok := uc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "updateTime", err: errors.New(`ent: missing required field "User.updateTime"`)}
	}
	if _, ok := uc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "isDeleted", err: errors.New(`ent: missing required field "User.isDeleted"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	_spec.OnConflict = uc.conflict
	if value, ok := uc.mutation.NickName(); ok {
		_spec.SetField(user.FieldNickName, field.TypeString, value)
		_node.NickName = value
	}
	if value, ok := uc.mutation.RealName(); ok {
		_spec.SetField(user.FieldRealName, field.TypeString, value)
		_node.RealName = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.Tel(); ok {
		_spec.SetField(user.FieldTel, field.TypeString, value)
		_node.Tel = value
	}
	if value, ok := uc.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := uc.mutation.LastLoginTime(); ok {
		_spec.SetField(user.FieldLastLoginTime, field.TypeInt64, value)
		_node.LastLoginTime = value
	}
	if value, ok := uc.mutation.LastIPAddr(); ok {
		_spec.SetField(user.FieldLastIPAddr, field.TypeString, value)
		_node.LastIPAddr = value
	}
	if value, ok := uc.mutation.CreateTime(); ok {
		_spec.SetField(user.FieldCreateTime, field.TypeInt64, value)
		_node.CreateTime = value
	}
	if value, ok := uc.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeInt64, value)
		_node.UpdateTime = value
	}
	if value, ok := uc.mutation.IsDeleted(); ok {
		_spec.SetField(user.FieldIsDeleted, field.TypeInt64, value)
		_node.IsDeleted = value
	}
	if nodes := uc.mutation.FollowersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.FollowersTable,
			Columns: user.FollowersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.FollowingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FollowingTable,
			Columns: user.FollowingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetNickName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetNickName(v+v).
//		}).
//		Exec(ctx)
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetNickName sets the "nickName" field.
func (u *UserUpsert) SetNickName(v string) *UserUpsert {
	u.Set(user.FieldNickName, v)
	return u
}

// UpdateNickName sets the "nickName" field to the value that was provided on create.
func (u *UserUpsert) UpdateNickName() *UserUpsert {
	u.SetExcluded(user.FieldNickName)
	return u
}

// SetRealName sets the "realName" field.
func (u *UserUpsert) SetRealName(v string) *UserUpsert {
	u.Set(user.FieldRealName, v)
	return u
}

// UpdateRealName sets the "realName" field to the value that was provided on create.
func (u *UserUpsert) UpdateRealName() *UserUpsert {
	u.SetExcluded(user.FieldRealName)
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsert) SetEmail(v string) *UserUpsert {
	u.Set(user.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmail() *UserUpsert {
	u.SetExcluded(user.FieldEmail)
	return u
}

// SetTel sets the "tel" field.
func (u *UserUpsert) SetTel(v string) *UserUpsert {
	u.Set(user.FieldTel, v)
	return u
}

// UpdateTel sets the "tel" field to the value that was provided on create.
func (u *UserUpsert) UpdateTel() *UserUpsert {
	u.SetExcluded(user.FieldTel)
	return u
}

// SetPassword sets the "password" field.
func (u *UserUpsert) SetPassword(v string) *UserUpsert {
	u.Set(user.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsert) UpdatePassword() *UserUpsert {
	u.SetExcluded(user.FieldPassword)
	return u
}

// SetLastLoginTime sets the "lastLoginTime" field.
func (u *UserUpsert) SetLastLoginTime(v int64) *UserUpsert {
	u.Set(user.FieldLastLoginTime, v)
	return u
}

// UpdateLastLoginTime sets the "lastLoginTime" field to the value that was provided on create.
func (u *UserUpsert) UpdateLastLoginTime() *UserUpsert {
	u.SetExcluded(user.FieldLastLoginTime)
	return u
}

// AddLastLoginTime adds v to the "lastLoginTime" field.
func (u *UserUpsert) AddLastLoginTime(v int64) *UserUpsert {
	u.Add(user.FieldLastLoginTime, v)
	return u
}

// SetLastIPAddr sets the "lastIPAddr" field.
func (u *UserUpsert) SetLastIPAddr(v string) *UserUpsert {
	u.Set(user.FieldLastIPAddr, v)
	return u
}

// UpdateLastIPAddr sets the "lastIPAddr" field to the value that was provided on create.
func (u *UserUpsert) UpdateLastIPAddr() *UserUpsert {
	u.SetExcluded(user.FieldLastIPAddr)
	return u
}

// SetCreateTime sets the "createTime" field.
func (u *UserUpsert) SetCreateTime(v int64) *UserUpsert {
	u.Set(user.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "createTime" field to the value that was provided on create.
func (u *UserUpsert) UpdateCreateTime() *UserUpsert {
	u.SetExcluded(user.FieldCreateTime)
	return u
}

// AddCreateTime adds v to the "createTime" field.
func (u *UserUpsert) AddCreateTime(v int64) *UserUpsert {
	u.Add(user.FieldCreateTime, v)
	return u
}

// SetUpdateTime sets the "updateTime" field.
func (u *UserUpsert) SetUpdateTime(v int64) *UserUpsert {
	u.Set(user.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "updateTime" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdateTime() *UserUpsert {
	u.SetExcluded(user.FieldUpdateTime)
	return u
}

// AddUpdateTime adds v to the "updateTime" field.
func (u *UserUpsert) AddUpdateTime(v int64) *UserUpsert {
	u.Add(user.FieldUpdateTime, v)
	return u
}

// SetIsDeleted sets the "isDeleted" field.
func (u *UserUpsert) SetIsDeleted(v int64) *UserUpsert {
	u.Set(user.FieldIsDeleted, v)
	return u
}

// UpdateIsDeleted sets the "isDeleted" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsDeleted() *UserUpsert {
	u.SetExcluded(user.FieldIsDeleted)
	return u
}

// AddIsDeleted adds v to the "isDeleted" field.
func (u *UserUpsert) AddIsDeleted(v int64) *UserUpsert {
	u.Add(user.FieldIsDeleted, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetNickName sets the "nickName" field.
func (u *UserUpsertOne) SetNickName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetNickName(v)
	})
}

// UpdateNickName sets the "nickName" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateNickName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNickName()
	})
}

// SetRealName sets the "realName" field.
func (u *UserUpsertOne) SetRealName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetRealName(v)
	})
}

// UpdateRealName sets the "realName" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateRealName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRealName()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertOne) SetEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetTel sets the "tel" field.
func (u *UserUpsertOne) SetTel(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetTel(v)
	})
}

// UpdateTel sets the "tel" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateTel() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateTel()
	})
}

// SetPassword sets the "password" field.
func (u *UserUpsertOne) SetPassword(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePassword() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePassword()
	})
}

// SetLastLoginTime sets the "lastLoginTime" field.
func (u *UserUpsertOne) SetLastLoginTime(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLastLoginTime(v)
	})
}

// AddLastLoginTime adds v to the "lastLoginTime" field.
func (u *UserUpsertOne) AddLastLoginTime(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddLastLoginTime(v)
	})
}

// UpdateLastLoginTime sets the "lastLoginTime" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLastLoginTime() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastLoginTime()
	})
}

// SetLastIPAddr sets the "lastIPAddr" field.
func (u *UserUpsertOne) SetLastIPAddr(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLastIPAddr(v)
	})
}

// UpdateLastIPAddr sets the "lastIPAddr" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLastIPAddr() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastIPAddr()
	})
}

// SetCreateTime sets the "createTime" field.
func (u *UserUpsertOne) SetCreateTime(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCreateTime(v)
	})
}

// AddCreateTime adds v to the "createTime" field.
func (u *UserUpsertOne) AddCreateTime(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddCreateTime(v)
	})
}

// UpdateCreateTime sets the "createTime" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCreateTime() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "updateTime" field.
func (u *UserUpsertOne) SetUpdateTime(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "updateTime" field.
func (u *UserUpsertOne) AddUpdateTime(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "updateTime" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdateTime() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetIsDeleted sets the "isDeleted" field.
func (u *UserUpsertOne) SetIsDeleted(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsDeleted(v)
	})
}

// AddIsDeleted adds v to the "isDeleted" field.
func (u *UserUpsertOne) AddIsDeleted(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddIsDeleted(v)
	})
}

// UpdateIsDeleted sets the "isDeleted" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsDeleted() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsDeleted()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetNickName(v+v).
//		}).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetNickName sets the "nickName" field.
func (u *UserUpsertBulk) SetNickName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetNickName(v)
	})
}

// UpdateNickName sets the "nickName" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateNickName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNickName()
	})
}

// SetRealName sets the "realName" field.
func (u *UserUpsertBulk) SetRealName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetRealName(v)
	})
}

// UpdateRealName sets the "realName" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateRealName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRealName()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertBulk) SetEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetTel sets the "tel" field.
func (u *UserUpsertBulk) SetTel(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetTel(v)
	})
}

// UpdateTel sets the "tel" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateTel() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateTel()
	})
}

// SetPassword sets the "password" field.
func (u *UserUpsertBulk) SetPassword(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePassword() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePassword()
	})
}

// SetLastLoginTime sets the "lastLoginTime" field.
func (u *UserUpsertBulk) SetLastLoginTime(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLastLoginTime(v)
	})
}

// AddLastLoginTime adds v to the "lastLoginTime" field.
func (u *UserUpsertBulk) AddLastLoginTime(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddLastLoginTime(v)
	})
}

// UpdateLastLoginTime sets the "lastLoginTime" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLastLoginTime() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastLoginTime()
	})
}

// SetLastIPAddr sets the "lastIPAddr" field.
func (u *UserUpsertBulk) SetLastIPAddr(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLastIPAddr(v)
	})
}

// UpdateLastIPAddr sets the "lastIPAddr" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLastIPAddr() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastIPAddr()
	})
}

// SetCreateTime sets the "createTime" field.
func (u *UserUpsertBulk) SetCreateTime(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCreateTime(v)
	})
}

// AddCreateTime adds v to the "createTime" field.
func (u *UserUpsertBulk) AddCreateTime(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddCreateTime(v)
	})
}

// UpdateCreateTime sets the "createTime" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCreateTime() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "updateTime" field.
func (u *UserUpsertBulk) SetUpdateTime(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "updateTime" field.
func (u *UserUpsertBulk) AddUpdateTime(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "updateTime" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdateTime() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetIsDeleted sets the "isDeleted" field.
func (u *UserUpsertBulk) SetIsDeleted(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsDeleted(v)
	})
}

// AddIsDeleted adds v to the "isDeleted" field.
func (u *UserUpsertBulk) AddIsDeleted(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddIsDeleted(v)
	})
}

// UpdateIsDeleted sets the "isDeleted" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsDeleted() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsDeleted()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
