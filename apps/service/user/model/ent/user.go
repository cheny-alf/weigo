// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"wego/apps/service/user/model/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// nickname
	NickName string `json:"nickName,omitempty"`
	// realName
	RealName string `json:"realName,omitempty"`
	// email
	Email string `json:"email,omitempty"`
	// tel
	Tel string `json:"tel,omitempty"`
	// password
	Password string `json:"password,omitempty"`
	// lastLoginTime
	LastLoginTime int64 `json:"lastLoginTime,omitempty"`
	// lastIPAddr
	LastIPAddr string `json:"lastIPAddr,omitempty"`
	// createTime
	CreateTime int64 `json:"createTime,omitempty"`
	// updateTime
	UpdateTime int64 `json:"updateTime,omitempty"`
	// isDeleted 0:否，1:是
	IsDeleted    int64 `json:"isDeleted,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldLastLoginTime, user.FieldCreateTime, user.FieldUpdateTime, user.FieldIsDeleted:
			values[i] = new(sql.NullInt64)
		case user.FieldNickName, user.FieldRealName, user.FieldEmail, user.FieldTel, user.FieldPassword, user.FieldLastIPAddr:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldNickName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickName", values[i])
			} else if value.Valid {
				u.NickName = value.String
			}
		case user.FieldRealName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field realName", values[i])
			} else if value.Valid {
				u.RealName = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldTel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tel", values[i])
			} else if value.Valid {
				u.Tel = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldLastLoginTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lastLoginTime", values[i])
			} else if value.Valid {
				u.LastLoginTime = value.Int64
			}
		case user.FieldLastIPAddr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lastIPAddr", values[i])
			} else if value.Valid {
				u.LastIPAddr = value.String
			}
		case user.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createTime", values[i])
			} else if value.Valid {
				u.CreateTime = value.Int64
			}
		case user.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateTime", values[i])
			} else if value.Valid {
				u.UpdateTime = value.Int64
			}
		case user.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field isDeleted", values[i])
			} else if value.Valid {
				u.IsDeleted = value.Int64
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("nickName=")
	builder.WriteString(u.NickName)
	builder.WriteString(", ")
	builder.WriteString("realName=")
	builder.WriteString(u.RealName)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("tel=")
	builder.WriteString(u.Tel)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(u.Password)
	builder.WriteString(", ")
	builder.WriteString("lastLoginTime=")
	builder.WriteString(fmt.Sprintf("%v", u.LastLoginTime))
	builder.WriteString(", ")
	builder.WriteString("lastIPAddr=")
	builder.WriteString(u.LastIPAddr)
	builder.WriteString(", ")
	builder.WriteString("createTime=")
	builder.WriteString(fmt.Sprintf("%v", u.CreateTime))
	builder.WriteString(", ")
	builder.WriteString("updateTime=")
	builder.WriteString(fmt.Sprintf("%v", u.UpdateTime))
	builder.WriteString(", ")
	builder.WriteString("isDeleted=")
	builder.WriteString(fmt.Sprintf("%v", u.IsDeleted))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
